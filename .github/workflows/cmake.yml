name: CMake

on:
  push:
  pull_request:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Prepare CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Compile code
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
    - name: Run rmbloat
      run: ${{github.workspace}}/build/bin/rmbloat rm -l windows macos bloated-package-example "package name with spaces" libbloat

    - name: Dig up some ancient Debian packages
      run: ${{github.workspace}}/build/bin/ancientpkg dig --archaeologists=34 --expected-pkgs=5 --location=land-of-github-actions --verbose --passes=10

    - name: Prepare artifacts
      run: mkdir -p uselinux/uselinux; cp src uselinux/uselinux/src -r; cp build/bin uselinux/uselinux/bin -r; cp build/lib uselinux/uselinux/lib -r; cp ${{github.workspace}}/CMakeLists.txt uselinux/uselinux/

    - name: Upload artifacts
      uses: actions/upload-artifact@v2.3.1
      with:
        name: uselinux-distrib.tar.gz
        path: uselinux/*